//=============================================================================
//
// 壁処理 [wall.cpp]
// Author : 切田海畝斗
//
//=============================================================================
#include "wall.h"
#include "material.h"
#include "sprite.h"

//=============================================================================
// コンストラクタ
//=============================================================================
Wall::Wall(D3DXVECTOR3 pos, D3DXVECTOR3 rot)
	:Base_Object(background, pos, rot, {8000.0f,2000.0f,0.0f}, NO_VECTOR3, DEF_COLOR, true),
	m_Uv_v({ 0.0f,0.0f }), m_Uv_f({ 1.0f,1.0f })
{
	// マテリアル設定
	ZeroMemory(GetMaterial(), sizeof(GetMaterial()));
	GetMaterial()->Diffuse = RefColor();
	GetMaterial()->Ambient = { 0.0f,0.0f,0.0f,1.0f };
	GetMaterial()->Emission = { 0.0f,0.0f,0.0f,0.0f };
	GetMaterial()->noTexSampling = 0;

	m_UvValue = RefRot().y >= D3DXToRadian(90) ? -0.002f : 0.002f;
}
//=============================================================================
// 更新
//=============================================================================
void Wall::Update(void)
{
	m_Uv_v.x += m_UvValue;
	if (m_Uv_v.x > 1.0f || m_Uv_v.x < -1.0f)
		m_Uv_v.x = 0.0f;
}
//=============================================================================
// 描画
//=============================================================================
void Wall::Draw(void)
{
	DrawPolygon(*this, RefImageMaterial().m_Wall, m_Uv_v, { 1.0f,1.0f });
}
//=============================================================================
// 衝突判定ディスパッチ
//=============================================================================
void Wall::CollDispatch(Base_Object* pObj)
{
}